rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return request.auth != null &&
             firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // User profile images
    match /users/{userId}/profile/{fileName} {
      // Users can read their own profile images, admins can read all
      allow read: if isOwner(userId) || isAdmin();
      // Users can write their own profile images
      allow write: if isOwner(userId) &&
                      request.resource.size < 5 * 1024 * 1024 && // 5MB limit
                      request.resource.contentType.matches('image/.*');
    }

    // Generated images from image generation
    match /generated/{userId}/{sessionId}/{fileName} {
      // Users can read their own generated images
      allow read: if isOwner(userId) || isAdmin();
      // Only the backend can write generated images (via admin SDK)
      // Frontend uploads should go through API
      allow write: if false;
    }

    // Session attachments and uploads
    match /sessions/{userId}/{sessionId}/{fileName} {
      // Users can read their own session files
      allow read: if isOwner(userId) || isAdmin();
      // Users can upload to their own sessions
      allow write: if isOwner(userId) &&
                      request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }

    // Public assets (if needed)
    match /public/{allPaths=**} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Default deny all other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
